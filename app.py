# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ymDf1EYVlptPBm3esINWcCsV9YFfIrAn
"""

from flask import Flask, request, jsonify
import pickle
import mysql.connector
import numpy as np

# Load model
with open("logistic_regression_model.pkl", "rb") as f:
    model = pickle.load(f)

app = Flask(__name__)

# Koneksi ke database MySQL (phpMyAdmin)
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",       # ganti sesuai server kamu
        user="root",            # ganti dengan user MySQL
        password="",            # ganti dengan password MySQL
        database="diabetes_db"  # sesuai dengan file patients.sql
    )

# Kolom fitur sesuai model
FEATURE_COLUMNS = [
    "Pregnancies", "Glucose", "BloodPressure", "SkinThickness",
    "Insulin", "BMI", "DiabetesPedigreeFunction", "Age"
]

@app.route("/predict/<int:patient_id>", methods=["GET"])
def predict_from_db(patient_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM patients WHERE id = %s", (patient_id,))
    row = cursor.fetchone()

    cursor.close()
    conn.close()

    if row is None:
        return jsonify({"error": "Patient not found"}), 404

    # Ambil fitur sesuai urutan
    features = np.array([row[col] for col in FEATURE_COLUMNS]).reshape(1, -1)
    prediction = model.predict(features)[0]
    proba = model.predict_proba(features)[0][1]

    return jsonify({
        "patient_id": patient_id,
        "input_data": {col: row[col] for col in FEATURE_COLUMNS},
        "prediction": int(prediction),
        "probability_diabetes": float(proba)
    })


@app.route("/predict", methods=["POST"])
def predict_manual():
    data = request.json
    try:
        features = np.array([data[col] for col in FEATURE_COLUMNS]).reshape(1, -1)
    except KeyError as e:
        return jsonify({"error": f"Missing field: {str(e)}"}), 400

    prediction = model.predict(features)[0]
    proba = model.predict_proba(features)[0][1]

    return jsonify({
        "input_data": data,
        "prediction": int(prediction),
        "probability_diabetes": float(proba)
    })


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4444, debug=True)